// mksyscall_windows.pl -l32 pcan_windows.go
// MACHINE GENERATED BY THE COMMAND ABOVE; DO NOT EDIT

package pcan

import "unsafe"
import "syscall"

var (
	modjpcan         = syscall.NewLazyDLL("jpcan.dll")
	modjpcangohelper = syscall.NewLazyDLL("jpcangohelper.dll")

	procpcan_open        = modjpcan.NewProc("pcan_open")
	procpcan_send_msg    = modjpcan.NewProc("pcan_send_msg")
	procpcan_init_pool   = modjpcan.NewProc("pcan_init_pool")
	procpcan_idvers      = modjpcan.NewProc("pcan_idvers")
	procpcan_setbtr      = modjpcan.NewProc("pcan_setbtr")
	procpcan_buson       = modjpcan.NewProc("pcan_buson")
	procpcan_busoff      = modjpcan.NewProc("pcan_busoff")
	procpcan_config_term = modjpcan.NewProc("pcan_config_term")
	procpcan_close       = modjpcan.NewProc("pcan_close")
	proccreate           = modjpcangohelper.NewProc("create")
	procmsgavail         = modjpcangohelper.NewProc("msgavail")
	procreadmsg          = modjpcangohelper.NewProc("readmsg")
	procclose            = modjpcangohelper.NewProc("close")
	procusbdevices       = modjpcangohelper.NewProc("usbdevices")
)

func Open(device string) (fd int, err error) {
	var _p0 *byte
	_p0, err = syscall.BytePtrFromString(device)
	if err != nil {
		return
	}
	r0, _, e1 := syscall.Syscall(procpcan_open.Addr(), 1, uintptr(unsafe.Pointer(_p0)), 0, 0)
	fd = int(r0)
	if fd < 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func SendMsg(fd int, msg *MsgData) (rc int32, err error) {
	r0, _, e1 := syscall.Syscall(procpcan_send_msg.Addr(), 2, uintptr(fd), uintptr(unsafe.Pointer(msg)), 0)
	rc = int32(r0)
	if rc != 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func InitPool(fd int, size uint32) (err error) {
	r1, _, e1 := syscall.Syscall(procpcan_init_pool.Addr(), 2, uintptr(fd), uintptr(size), 0)
	if r1 != 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func Idvers(fd int, mod *uint32, car *uint32) (err error) {
	r1, _, e1 := syscall.Syscall(procpcan_idvers.Addr(), 3, uintptr(fd), uintptr(unsafe.Pointer(mod)), uintptr(unsafe.Pointer(car)))
	if r1 != 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func SetBTR(fd int, btr uint16) (err error) {
	r1, _, e1 := syscall.Syscall(procpcan_setbtr.Addr(), 2, uintptr(fd), uintptr(btr), 0)
	if r1 != 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func BusOn(fd int) (err error) {
	r1, _, e1 := syscall.Syscall(procpcan_buson.Addr(), 1, uintptr(fd), 0, 0)
	if r1 != 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func BusOff(fd int) (err error) {
	r1, _, e1 := syscall.Syscall(procpcan_busoff.Addr(), 1, uintptr(fd), 0, 0)
	if r1 != 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func ConfigTerm(fd int, term uint8) (err error) {
	r1, _, e1 := syscall.Syscall(procpcan_config_term.Addr(), 2, uintptr(fd), uintptr(term), 0)
	if r1 != 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func Close(fd int) (err error) {
	r1, _, e1 := syscall.Syscall(procpcan_close.Addr(), 1, uintptr(fd), 0, 0)
	if r1 != 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func CreateHelper(fd int) (err error) {
	r1, _, e1 := syscall.Syscall(proccreate.Addr(), 1, uintptr(fd), 0, 0)
	if r1 != 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func MsgAvail(fd int) (n int) {
	r0, _, _ := syscall.Syscall(procmsgavail.Addr(), 1, uintptr(fd), 0, 0)
	n = int(r0)
	return
}

func ReadMsg(fd int, buf *uint8) (err error) {
	r1, _, e1 := syscall.Syscall(procreadmsg.Addr(), 2, uintptr(fd), uintptr(unsafe.Pointer(buf)), 0)
	if r1 != 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func CloseHelper(fd int) (err error) {
	r1, _, e1 := syscall.Syscall(procclose.Addr(), 1, uintptr(fd), 0, 0)
	if r1 == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func USBDevices(list []DeviceInfo) (n int, err error) {
	var _p0 *DeviceInfo
	if len(list) > 0 {
		_p0 = &list[0]
	}
	r0, _, e1 := syscall.Syscall(procusbdevices.Addr(), 2, uintptr(unsafe.Pointer(_p0)), uintptr(len(list)), 0)
	n = int(r0)
	if n == -1 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}
